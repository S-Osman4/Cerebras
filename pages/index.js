import React, { useState } from "react";
import styles from "../styles/Home.module.css"; // Ensure the path to your CSS file is correct

export default function Home() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [showQuickResponses, setShowQuickResponses] = useState(true);
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      sendMessage(input);
      e.preventDefault();
    }
  };

  const quickResponse = (text) => {
    sendMessage(text);
    setShowQuickResponses(false);
  };

  const sendMessage = async (message) => {
    const trimmedMessage = message.trim();
    if (!trimmedMessage) return;

    setShowQuickResponses(false);

    const newMessage = { id: Date.now(), text: trimmedMessage, sender: "user" };
    setMessages((messages) => [...messages, newMessage]);
    setInput("");

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: trimmedMessage }),
      });

      if (response.ok) {
        const { reply } = await response.json();
        const formattedReply = formatText(reply);

        setMessages((messages) => [
          ...messages,
          { id: Date.now() + 1, text: formattedReply, sender: "bot" },
        ]);
      } else {
        console.error(
          "Error processing the AI response:",
          await response.text()
        );
        setMessages((messages) => [
          ...messages,
          {
            id: Date.now() + 1,
            text: "Sorry, there was an error processing your request.",
            sender: "bot",
          },
        ]);
      }
    } catch (error) {
      console.error("Error processing the AI response:", error);
      setMessages((messages) => [
        ...messages,
        {
          id: Date.now() + 1,
          text: "Sorry, there was an error processing your request.",
          sender: "bot",
        },
      ]);
    }
  };

  const formatText = (text) => {
    // Handle headings (e.g., # Heading 1)
    let formattedText = text.replace(/^# (.*?)$/gm, "<h1>$1</h1>");
    formattedText = formattedText.replace(/^## (.*?)$/gm, "<h2>$1</h2>");
    formattedText = formattedText.replace(/^### (.*?)$/gm, "<h3>$1</h3>");

    // Handle bold text (e.g., **bold text**)
    formattedText = formattedText.replace(
      /\*\*(.*?)\*\*/g,
      "<strong>$1</strong>"
    );

    // Handle bullet points (e.g., * item)
    formattedText = formattedText.replace(/^\* (.*?)$/gm, "<li>$1</li>");
    // Wrap list items in <ul> tags if there are any <li> elements
    if (formattedText.includes("<li>")) {
      formattedText = formattedText.replace(
        /(<li>.*?<\/li>)/gms,
        "<ul>$1</ul>"
      );
    }

    // Handle inline code (e.g., `code`)
    formattedText = formattedText.replace(/`(.*?)`/g, "<code>$1</code>");

    // Handle line breaks (e.g., <br> after each new line)
    formattedText = formattedText.replace(/\n/g, "<br>");

    return formattedText;
  };

  const renderMessage = (msg) => {
    if (msg.sender === "bot") {
      return (
        <p
          key={msg.id}
          className={styles.botMessage}
          dangerouslySetInnerHTML={{ __html: msg.text }}
        ></p>
      );
    } else {
      return (
        <p key={msg.id} className={styles.userMessage}>
          {msg.text}
        </p>
      );
    }
  };
  return (
    <div className={styles.container}>
      <div className={styles.chatArea}>
        {messages.map((msg) => renderMessage(msg))}
        {showQuickResponses && (
          <div className={styles.quickResponses}>
            <button
              onClick={() =>
                quickResponse("Can you give me some N5 vocabulary?")
              }
            >
              N5 Daily Vocabulary
            </button>
            <button
              onClick={() => quickResponse("Explain a simple N5 grammar rule.")}
            >
              N5 Grammar
            </button>
            <button
              onClick={() =>
                quickResponse("Give me an example sentence for N5.")
              }
            >
              N5 Example Sentence
            </button>
          </div>
        )}
      </div>
      <div className={styles.controls}>
        <input
          type="text"
          value={input}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          className={styles.input}
          placeholder="Type your message here..."
        />
        <button
          onClick={() => sendMessage(input)}
          className={styles.sendButton}
        >
          Send
        </button>
      </div>
      <div className={styles.disclaimer}>
        *This content is generated by an AI assistant.*
      </div>
    </div>
  );
}
